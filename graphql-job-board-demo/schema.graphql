type Query {
  jobs: [Job!]
  job(id: ID!): Job
  companies: [Company!]
  posts: [Post!]
  users: [User!]
}

interface BasicInfo {
  id: ID!
  title: String
  description: String
}

type User {
  id: ID!
  email: String
  posts: [Post]!
}

type Job implements BasicInfo {
  id: ID!
  jobId: ID @deprecated(reason: "Use `id` instead.")
  title: String!
  description: String
  company: Company!
}

type Company {
  id: ID!
  name: String!
  description: String
}

enum PostStatus {
  DRAFT
  PUBLISHED
  INACTIVE
  ARCHIVED
}

type Post implements BasicInfo {
  id: ID!
  title: String
  description: String
  createdAt: String
  updatedAt: String
  status: PostStatus!
}

union SearchResults = Company | Post | Job

type Mutation {
  addCompany(input: CreateCompanyInput): Company!
  deleteCompany(id: ID!): Company!
  addJob(input: CreateJobInput): Job
  deleteJob(id: ID!): Job
  addPost(input: CreatePostInput): Post
  updatePost(input: UpdatePostInput): Post
}

input CreateCompanyInput {
  name: String!
  description: String
}
input CreateJobInput {
  companyId: String!
  title: String!
  description: String
}

input CreatePostInput {
  title: String
  description: String
}

input UpdatePostInput {
  id: ID
  status: String
}

type Subscription {
  jobAdded: Job
  companyAdded: Company
  companyRemoved: Company
  jobRemoved: Job
}
